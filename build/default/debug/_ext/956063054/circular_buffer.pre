
# 1 "../libs/circular_buffer/circular_buffer.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.12\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 17 "../libs/circular_buffer\circular_buffer.h"
typedef struct
{
uint8_t* base;
uint16_t size;
uint16_t head;
uint16_t tail;
}CircularBuffer;

typedef enum
{
NO_ERROR,
BUFFER_OVERFLOW,
BUFFER_UNDERFLOW,
UNKNOWN_ERROR
}CircularBufferError;

uint8_t readCircularBuffer(CircularBuffer*, CircularBufferError*);
void writeCircularBuffer(CircularBuffer*, uint8_t, CircularBufferError*);
inline uint8_t circularBufferFull(CircularBuffer*);
inline uint8_t circularBufferEmpty(CircularBuffer*);

# 24 "../libs/circular_buffer/circular_buffer.c"
uint8_t readCircularBuffer(CircularBuffer* buf, CircularBufferError* error)
{

if(circularBufferEmpty(buf))
{
*error = BUFFER_UNDERFLOW;
return 0x00;
}



char temp = *(buf->base + buf->tail);
buf->tail++;


if(buf->tail >= buf->size)
{
buf->tail = 0;
}


*error = NO_ERROR;
return temp;
}

# 62
void writeCircularBuffer(CircularBuffer* buf, uint8_t data, CircularBufferError* error)
{

if(circularBufferFull(buf))
{
*error = BUFFER_OVERFLOW;
return;
}



*(buf->base + buf->head) = data;
buf->head++;


if(buf->head >= buf->size)
{
buf->head = 0;
}


*error = NO_ERROR;
}

# 94
inline uint8_t circularBufferFull(CircularBuffer* buf)
{
uint16_t headTemp = buf->head;
if(++headTemp >= buf->size)
{
headTemp = 0;
}
return (headTemp == buf->tail);
}

# 112
inline uint8_t circularBufferEmpty(CircularBuffer* buf)
{
return (buf->head == buf->tail);
}
